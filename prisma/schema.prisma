generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  date        DateTime @db.Date
  createdAt   DateTime @default(now())
  tasks       Task[]   @relation("EventTasks")
  userId      Int
  user        User     @relation("UserEvents", fields: [userId], references: [id], onDelete: Cascade)
}

model Task {
  id          Int          @id @default(autoincrement())
  eventId     Int
  name        String
  description String?
  status      String       @default("To Do")
  dueDate     DateTime?    @db.Date
  createdAt   DateTime     @default(now())
  event       Event        @relation("EventTasks", fields: [eventId], references: [id], onDelete: Cascade)
  updates     TaskUpdate[] @relation("TaskUpdates")
  userId      Int
  user        User     @relation("UserTasks", fields: [userId], references: [id], onDelete: Cascade)
}

model TaskUpdate {
  id         Int      @id @default(autoincrement())
  taskId     Int
  updateText String
  updatedAt  DateTime @default(now())
  task       Task     @relation("TaskUpdates", fields: [taskId], references: [id], onDelete: Cascade)
  userId      Int
  user        User     @relation("UserTaskUpdates", fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  events    Event[]  @relation("UserEvents")
  tasks     Task[]   @relation("UserTasks")
  taskUpdates TaskUpdate[] @relation("UserTaskUpdates")
}

enum Role {
  USER
  ADMIN
}